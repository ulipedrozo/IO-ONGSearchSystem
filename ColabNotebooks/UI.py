# Interfaz de Usuario - Sistema de B√∫squeda Inteligente de ONGs
# Requiere: streamlit, pandas, plotly

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import time
import os
import sys
# Importar sistema
from Model_Enhanced import SistemaEmbeddingsONGAvanzado

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
csv_path = os.path.join(BASE_DIR, 'ongs_procesadas.csv')

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de recomendaci√≥n de ONGs",
    page_icon="",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para mejorar la apariencia
st.markdown("""
    <style>
    .main {
        padding-top: 2rem;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 20px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: bold;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #45a049;
        transform: scale(1.05);
    }
    .ong-card {
        background-color: #f0f2f6;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }
    h1 {
        color: #1976d2;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sidebar .sidebar-content {
        background-color: #f5f5f5;
    }
    </style>
    """, unsafe_allow_html=True)

# Inicializar estado de sesi√≥n
if 'historial_busquedas' not in st.session_state:
    st.session_state.historial_busquedas = []
if 'sistema_cargado' not in st.session_state:
    st.session_state.sistema_cargado = False
if 'df_ongs' not in st.session_state:
    st.session_state.df_ongs = None
if 'sistema_embeddings' not in st.session_state:
    st.session_state.sistema_embeddings = None

# Funci√≥n para cargar el sistema (simulada para el ejemplo)
@st.cache_resource
def cargar_sistema_embeddings():
    global sistema_embeddings, df_ongs

    with st.spinner('Cargando sistema de b√∫squeda inteligente...'):
        time.sleep(2)  # Simular carga

        # En producci√≥n, aqu√≠ cargar√≠as tu sistema real:
        sistema_embeddings = SistemaEmbeddingsONGAvanzado()
        df = pd.read_csv(csv_path)
        sistema_embeddings.ajustar(df)

        return df, sistema_embeddings  # En producci√≥n, retornar√≠as (df, sistema)

# Funci√≥n simulada de b√∫squeda
def buscar_ongs(query, df, top_k=5):
    global sistema_embeddings
    
    """Simula la b√∫squeda sem√°ntica
    # Para el ejemplo, hacemos una b√∫squeda simple por palabras clave
    query_lower = query.lower()
    scores = []

    for idx, row in df.iterrows():
        score = 0
        # Buscar en todos los campos de texto
        for campo in ['nombre', 'categoria', 'mision', 'servicios']:
            if query_lower in str(row[campo]).lower():
                score += 1

        # Palabras clave espec√≠ficas
        if 'ni√±o' in query_lower and 'Infancia' in row['categoria']:
            score += 2
        if 'educaci√≥n' in query_lower and 'Educaci√≥n' in row['categoria']:
            score += 2
        if 'salud' in query_lower and 'Salud' in row['categoria']:
            score += 2
        if 'mujer' in query_lower and 'G√©nero' in row['categoria']:
            score += 2

        scores.append(score)

    # Ordenar por score y retornar top_k
    df['score'] = scores
    df_sorted = df.sort_values('score', ascending=False)

    resultados = []
    for idx, row in df_sorted.head(top_k).iterrows():
        if row['score'] > 0:
            resultados.append({
                'nombre': row['nombre'],
                'categoria': row['categoria'],
                'mision': row['mision'],
                'servicios': row['servicios'],
                'ubicacion': row['ubicacion'],
                'contacto': row['contacto'],
                'similitud': min(row['score'] / 3, 0.99)  # Normalizar score
            })"""

    resultados = sistema_embeddings.buscar_ongs_similares(
        query, 
        top_k=top_k,
        umbral=0.1
    )
    return resultados

# INTERFAZ PRINCIPAL
def main():
    global sistema_embeddings, df_ongs

    # Header con logo e informaci√≥n
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("# Sistema de recomendaci√≥n de ONGs")
        st.markdown("### Encuentra la ayuda que necesitas")

    # Cargar sistema si no est√° cargado
    if not st.session_state.sistema_cargado:
        df_ongs, sistema_embeddings = cargar_sistema_embeddings()
        st.session_state.df_ongs = df_ongs
        st.session_state.sistema_embeddings = sistema_embeddings
        st.session_state.sistema_cargado = True

    # Barra lateral con informaci√≥n y filtros
    with st.sidebar:
        st.markdown("## üìä Panel de Control")

        # Informaci√≥n del sistema
        st.info(f"""
        **Sistema cargado**
        Total ONGs: {len(st.session_state.df_ongs)}
        Categor√≠as: {st.session_state.df_ongs['categoria'].nunique()}
        """)

        # Filtros opcionales
        st.markdown("### üîç Filtros de B√∫squeda")

        categorias = ['Todas'] + sorted(st.session_state.df_ongs['categoria'].unique().tolist())
        categoria_filtro = st.selectbox("Categor√≠a:", categorias)

        # Estad√≠sticas
        st.markdown("### üìà Estad√≠sticas de Uso")
        st.metric("B√∫squedas realizadas", len(st.session_state.historial_busquedas))

        # Historial
        if st.session_state.historial_busquedas:
            st.markdown("### üïê Historial Reciente")
            for busqueda in st.session_state.historial_busquedas[-5:]:
                st.text(f"‚Ä¢ {busqueda}")

    # √Årea principal de b√∫squeda
    st.markdown("---")

    # Caja de b√∫squeda prominente
    col1, col2, col3 = st.columns([1, 3, 1])
    with col2:
        query = st.text_input(
            "¬øQu√© tipo de ayuda necesitas?",
            placeholder="Ej: apoyo escolar para ni√±os, ayuda alimentaria, etc.",
            help="Describe en tus propias palabras qu√© tipo de asistencia buscas"
        )

        buscar_button = st.button("üîç Buscar ONGs", type="primary", use_container_width=True)

    # Sugerencias de b√∫squeda
    st.markdown("#### üí° Sugerencias de b√∫squeda:")
    col1, col2, col3, col4 = st.columns(4)

    sugerencias = [
        "Educaci√≥n para ni√±os",
        "Ayuda alimentaria",
        "Apoyo psicol√≥gico",
        "Salud gratuita"
    ]

    for col, sugerencia in zip([col1, col2, col3, col4], sugerencias):
        with col:
            if st.button(sugerencia, key=f"sug_{sugerencia}"):
                query = sugerencia
                buscar_button = True

    # Procesar b√∫squeda
    if buscar_button and query:
        # Agregar al historial
        st.session_state.historial_busquedas.append(query)

        # Mostrar spinner mientras busca
        with st.spinner('Buscando las mejores ONGs para ti...'):
            # Filtrar por categor√≠a si se seleccion√≥
            df_filtrado = st.session_state.df_ongs
            if categoria_filtro != 'Todas':
                df_filtrado = df_filtrado[df_filtrado['categoria'] == categoria_filtro]

            # Realizar b√∫squeda
            resultados = buscar_ongs(query, df_filtrado)

        # Mostrar resultados
        st.markdown("---")
        st.markdown("## üéØ Resultados de B√∫squeda")

        if resultados:
            st.success(f"Encontr√© {len(resultados)} organizaciones que pueden ayudarte:")

            # Tabs para diferentes vistas
            tab1, tab2, tab3 = st.tabs(["üìã Lista Detallada", "üìä Vista Comparativa", "üó∫Ô∏è Informaci√≥n de Contacto"])

            with tab1:
                # Vista de tarjetas
                for i, ong in enumerate(resultados, 1):
                    with st.container():
                        col1, col2 = st.columns([3, 1])

                        with col1:
                            st.markdown(f"### {i}. {ong['nombre']}")
                            st.markdown(f"**Categor√≠a:** {ong['categoria']} | **Relevancia:** {ong['similitud']:.0%}")

                            with st.expander("Ver detalles completos"):
                                st.markdown(f"**üìã Misi√≥n:**  \n{ong['mision']}")
                                st.markdown(f"**üõ†Ô∏è Servicios:**  \n{ong['servicios']}")
                                st.markdown(f"**üìç Ubicaci√≥n:**  \n{ong['ubicacion']}")
                                st.markdown(f"**üìû Contacto:**  \n{ong['contacto']}")

                        with col2:
                            st.markdown(f"<div class='metric-card'><h3>{ong['similitud']:.0%}</h3><p>Relevancia</p></div>",
                                      unsafe_allow_html=True)

                        st.markdown("---")

            with tab2:
                # Vista comparativa
                df_resultados = pd.DataFrame(resultados)

                # Gr√°fico de relevancia
                fig_relevancia = px.bar(
                    df_resultados,
                    x='similitud',
                    y='nombre',
                    orientation='h',
                    title='Relevancia de las ONGs encontradas',
                    labels={'similitud': 'Relevancia', 'nombre': 'Organizaci√≥n'},
                    color='similitud',
                    color_continuous_scale='Viridis'
                )
                fig_relevancia.update_layout(height=400)
                st.plotly_chart(fig_relevancia, use_container_width=True)

                # Distribuci√≥n por categor√≠as
                fig_categorias = px.pie(
                    df_resultados,
                    names='categoria',
                    title='Distribuci√≥n por Categor√≠as',
                    hole=0.3
                )
                st.plotly_chart(fig_categorias, use_container_width=True)

            with tab3:
                # Mapa de contactos (tabla interactiva)
                st.markdown("### üìç Informaci√≥n de Contacto R√°pido")

                contacto_df = df_resultados[['nombre', 'ubicacion', 'contacto']].copy()
                st.dataframe(
                    contacto_df,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "nombre": st.column_config.TextColumn("Organizaci√≥n", width="medium"),
                        "ubicacion": st.column_config.TextColumn("Direcci√≥n", width="medium"),
                        "contacto": st.column_config.TextColumn("Contacto", width="medium"),
                    }
                )

                # Bot√≥n para exportar
                csv = contacto_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• Descargar informaci√≥n de contacto",
                    data=csv,
                    file_name=f'contactos_ongs_{datetime.now().strftime("%Y%m%d")}.csv',
                    mime='text/csv'
                )

        else:
            st.warning("No encontr√© organizaciones que coincidan exactamente con tu b√∫squeda.")
            st.info("Intenta con t√©rminos m√°s generales o explora las categor√≠as disponibles.")

    # Secci√≥n de informaci√≥n adicional
    with st.expander("‚ÑπÔ∏è Acerca de este sistema"):
        st.markdown("""
        ### ü§ñ Sistema de B√∫squeda Inteligente

        Este buscador utiliza Inteligencia Artificial y Redes Neuronales de tipo Transformers para entender tu consulta y encontrar
        las organizaciones m√°s relevantes para tus necesidades.

        **Caracter√≠sticas principales:**
        - üß† Comprensi√≥n de lenguaje natural en espa√±ol
        - üéØ B√∫squeda sem√°ntica avanzada
        - üìä Ranking por relevancia
        - üîç Filtros por categor√≠a

        **¬øC√≥mo funciona?**
        1. Describe tu necesidad en tus propias palabras
        2. El sistema analiza tu consulta usando embeddings sem√°nticos
        3. Compara con la base de datos de ONGs
        4. Retorna las organizaciones m√°s relevantes ordenadas por similitud

        **Tecnolog√≠a:** Sentence-BERT multilingual, procesamiento de lenguaje natural
        """)

    # Footer
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col2:
        st.markdown(
            "<p style='text-align: center; color: gray;'>Version 1.0.0 - Investigaci√≥n Operativa I - Facultad de Ciencias Exactas - UNICEN</p>",
            unsafe_allow_html=True
        )

# Ejecutar la aplicaci√≥n
if __name__ == "__main__":
    main()